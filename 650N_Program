#pragma config(I2C_Usage, I2C1, i2cSensors)
#pragma config(Sensor, in1,    power_Expander, sensorAnalog)
#pragma config(Sensor, in3,    elevator_Pot,   sensorPotentiometer)
#pragma config(Sensor, in4,    shovelLift_Pot, sensorPotentiometer)
#pragma config(Sensor, dgtl1,  MOGOlimit,      sensorTouch)
#pragma config(Sensor, I2C_1,  IME_DL,         sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Sensor, I2C_2,  IME_DR,         sensorQuadEncoderOnI2CPort,    , AutoAssign )
#pragma config(Motor,  port2,           Claw,          tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port3,           Arm_L,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port4,           Arm_R,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port5,           mogoL,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port6,           mogoR,         tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port7,           Drivetrain_R,  tmotorVex393_MC29, openLoop, reversed, driveRight, encoderPort, I2C_2)
#pragma config(Motor,  port8,           Drivetrain_L,  tmotorVex393_MC29, openLoop, driveLeft, encoderPort, I2C_1)
#pragma config(Motor,  port9,           Elavator_L,    tmotorVex393_MC29, openLoop)
#pragma config(Motor,  port10,          Elavator_R,    tmotorVex393_HBridge, openLoop)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

#pragma platform(VEX2)

//Competition Control and Duration Settings
#pragma competitionControl(Competition)
#pragma autonomousDuration(20)
#pragma userControlDuration(120)
#pragma DebuggerWindows("debugStream")
#pragma DebuggerWindows("motors")
#pragma DebuggerWindows("Sensors")




//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//	COMPONENT TITLE: PROGRAM FOR ROBOT 650N																							//
//	PROJECT TITLE:	VEX ROBOTIC COMPEITION 2K17_18																			//
//																																											//
//	PROGRAM AUTHOR(S): NMS ROBOTICS TEAM																								//
//	TEAM MEMBERS: TEAM 650N MAROONS																											//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                         INCLUDE STATEMENTS																						//
//																																											//
// 	You may want to place your include statements here.																	//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////
#include "Vex_Competition_Includes.c"   //Main competition background code...do not modify!

//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                          GLOBAL VARIABLES																						//
//																																											//
// 	You may want to create some user defined functions for your program.								//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////
int autonomousMode = 1;						//default value for autonomous mode
int driverControlModeCount = 1;

//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                          CONSTANT VARIABLES																					//
//																																											//
// 	You may want to create some user constant variables for your program.								//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////

//const float WHEEL_CIRC = 4*PI;
//const float EFFECTIVE_CIRC = WHEEL_CIRC*sqrt(2);
int q1, q2, q3, q4;
const int SPEED393_STANDARD = 100;
const int SPEED393_NOPOWER = 0;
int encoderTicks = 672.2;
int wheelDiameter = 4;
int MOGOSPEED_STANDARD = 45;
int MOGONOPOWER = 0;
//const int SPEED393_HIGHSPEED = 160;
const int CLAWSPEED_STANDARD = 100;
const int CLAWSPEED_NOPOWER = SPEED393_NOPOWER;
int wheelCirc = wheelDiameter * PI;
int ticksPerInch = encoderTicks / wheelCirc;
//const int DEAD_BAND = 1;
//const int MAX_OUT = MAX_MOTOR_POWER_FWD;
const int SHOVELSPEED_STANDARD = 127;
const int SHOVELSPEED_NOPOWER = SPEED393_NOPOWER;
const int ARMSPEED_STANDARD = 80;
const int ARMSPEED_NOPOWER = SPEED393_NOPOWER;


//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                         USER DEFINED FUNCTIONS																				//
//													 FOR ROBOT CONTROL																					//
//																																											//
// 				Insert the functions that control different aspects of your robot							//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////
/*--------------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- Green Led On
BONAFIDES:		 Led Lights
/*--------------------------------------------------------------------------------------*/

	void
	Blink_GreenLED(){
		while(1==1){
		turnLEDOn(8);
		turnLEDOn(10);
		turnLEDOn(12);
		wait(.5);
		turnLEDOff(8);
		turnLEDOff(10);
		turnLEDOff(12);
	}

}




/*--------------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- Red Led On
BONAFIDES:		 Led Lights
/*--------------------------------------------------------------------------------------*/

	void
	Blink_RedLED(){
		while(1==1){
		turnLEDOn(7);
		turnLEDOn(9);
		turnLEDOn(11);
		wait(0.5);
		turnLEDOff(7);
		turnLEDOff(9);
		turnLEDOff(11);
	}

	}


/*--------------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- DRIVE TRAIN CONTROL
BONAFIDES:			DRIVE TRAIN PROGRAM
/*--------------------------------------------------------------------------------------*/
void
driveTrain_func(){
	while(true){
		motor[Drivetrain_L] = vexRT(Ch3);
		motor[Drivetrain_R] = vexRT(Ch2);
	}
}
/*--------------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- TOWER ELEVATOR LIFT PROGRAM
BONAFIDES:			USER FUNCTION TO RUN ELEVATOR LIFT ON THE TOWER
/*--------------------------------------------------------------------------------------*/
void
towerLift_func(){
		 while(true){
		  if(vexRT[Btn5U] == 1){
    		motor[Elavator_L] = -SPEED393_STANDARD;
    		motor[Elavator_R] = SPEED393_STANDARD;}
    	//lower tower lift
    	else if(vexRT[Btn5D] == 1){
    		motor[Elavator_L] = SPEED393_STANDARD;
    		motor[Elavator_R] = -SPEED393_STANDARD;}
    	//hold steady
    	else
    	{motor[Elavator_L] = SPEED393_NOPOWER;
    	 motor[Elavator_R] = SPEED393_NOPOWER;}
  	}
}

/*--------------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- ARM LIFT PROGRAM
BONAFIDES:			USER FUNCTION TO RUN ARM LIFT ON THE TOWER
/*--------------------------------------------------------------------------------------*/
void
armLift_func(){
		 while(true){

    	 if(vexRT[Btn6U] == 1){
	    		motor[Arm_L] = -ARMSPEED_STANDARD;
	    		motor[Arm_R] = ARMSPEED_STANDARD;}

	    		//lower arm lift
	    	else if(vexRT[Btn6D] == 1){
	    		motor[Arm_L] = ARMSPEED_STANDARD;
	    		motor[Arm_R] = -ARMSPEED_STANDARD;}

	    		//hold steady
	    	else
	    	{motor[Arm_L] = ARMSPEED_NOPOWER;
	    	 motor[Arm_R] = ARMSPEED_NOPOWER;}
  	}
}

/*--------------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- SHOVEL LIFT PROGRAM
BONAFIDES:			USER FUNCTION TO RUN SHOVEL LIFT FOR MOBILE GOAL SCORING
/*--------------------------------------------------------------------------------------*/
void
shovelLift_func(){
    while(true){

    if(vexRT[Btn7U] == 1){
    		motor[mogoL] = -SHOVELSPEED_STANDARD;
    		motor[mogoR] = SHOVELSPEED_STANDARD;}

    	//lower shovel lift
    	else if(vexRT[Btn7D] == 1){
    		motor[mogoL] = SHOVELSPEED_STANDARD;
    		motor[mogoR] = -SHOVELSPEED_STANDARD;}

    	//hold steady
    	else
    	{motor[mogoL] = SHOVELSPEED_NOPOWER;
    	 motor[mogoR] = SHOVELSPEED_NOPOWER;}
  	}
}

/*-----------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- CLAW
BONAFIDES:			USER FUNCTION FOR CLAW PROGRAM
/*-----------------------------------------------------------------------------*/
void
claw_func(){
    while(true){

    	if(vexRT[Btn8R] == 1){
    		motor[Claw] = 127;}

    	//close claw
    	else if(vexRT[Btn8L] == 1){
    		motor[Claw] = -127;}

    	//hold steady
    	else{
    		motor[Claw] = 0;}
  	}
}

/*--------------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		OTHER VOIDS
BONAFIDES:			USER FUNCTION TO RESET QUADRATURE AND/OR ENTERGRATED MOTOR ENCODERS
/*--------------------------------------------------------------------------------------*/

	void autoDrive(int speed){
	motor[Drivetrain_R] = -speed; 							// 'Y' motors RightFront and RightBack
	motor[Drivetrain_L] = -speed;								// 'Y' motors LeftFront and LeftBack
	//motor[] = speed;													// open commmand for programming motors individually
	//motor[] = speed;													// open commmand for programming motors individually
}

void autoDriveDist(int speed, int dist){
	SensorValue[IME_DL] = 0;
	SensorValue[IME_DR] = 0;
	int tickGoal = ticksPerInch * dist;

	/*while((abs(SensorValue[quadLeft])) < tickGoal * 0.6){
	//check for right encoder differences
	int rDiff = abs((SensorValue[quadLeft]) - abs(SensorValue[quadRight]));
	//rMod = 10% speed n the direction of rDiff
	int rMod = sgn(rDiff)*speed*0.1;

	}*/

	while(abs(SensorValue[IME_DL]) < tickGoal){
		autoDrive(speed/2);
	}
	autoDrive(0);
}

void stopMOGO(){

	if (SensorValue(MOGOlimit) == 1){
		motor[mogoL] = MOGONOPOWER;
		motor[mogoR] = MOGONOPOWER;
	}

	else (SensorValue(MOGOlimit) == 0);{
		motor[mogoL] = MOGOSPEED_STANDARD;
		motor[mogoR] = MOGOSPEED_STANDARD;

	}

}

void raiseMOGO(){
	motor[mogoL] = MOGOSPEED_STANDARD;
	motor[mogoR] = -MOGOSPEED_STANDARD;
	wait(.5);
}

void lowerMOGO(){
	motor[mogoL] = -MOGOSPEED_STANDARD;
	motor[mogoR] = MOGOSPEED_STANDARD;
	wait(1);
}

//------------------------------------------------------------------	DRIVE FUNCTIONS:TURN FUNCTIONS
//function to turn the robot at a specified speed
//positive speed = turn right, negative speed = turn left

void
autoturn(int speed){
	motor[Drivetrain_R] = -speed;
	motor[Drivetrain_L] = speed;
	//motor[] = speed;	//open commmand encase of programming motors individually
	//motor[] = speed; 	//open commmand encase of programming motors individually
}

/*
void autoDriveTime(int speed, int mSec){
autoDrive(speed);
wait1Msec(mSec);
autoDrive(0);
}
*/

void autoTurnDist(int speed, int dist){
	SensorValue[IME_DL] = 0;
	SensorValue[IME_DR] = 0;
	int tickGoal = ticksPerInch * dist;
	while(abs(SensorValue[IME_DL]) < tickGoal){
		autoturn(speed);
	}
	autoturn(0);
}

void clearEncoders(){
	SensorValue[IME_DL] = 0;
	SensorValue[IME_DR] = 0;
}

//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                         USER DEFINED FUNCTIONS																				//
//											FOR PROGRAM CONTROL & LCD DISPLAY																//
//																																											//
// 				Listed below are the functions that are control elements of your program.			//
//				That is the functions below give the user the ability to receive output to		//
//				LCD from the sensors on the robot as well as giving the user the ability to		//
//				choose between differenting programs to be run.																//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////

/*-----------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- CLEAR LCD
BONAFIDES:			FILE TO CLEAR LINES OF LCD IN ONE STATEMENT
/*-----------------------------------------------------------------------------*/
void
clearLCD(){
	//clears 1st & 2nd lines of the LCD
	clearLCDLine(0);	// 1st line of LCD
	clearLCDLine(1);	// 2nd line of LCD
}

/*-----------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- PLACE HOLDER LCD DISPLAY INFORMATION
BONAFIDES:			DISPLAYS MESSAGE TO USER WHEN SELECTION LOCATION IS EMPTY
/*-----------------------------------------------------------------------------*/
void
nothingOnScreen(){
	displayLCDCenteredString(0, "Currently"); // Msg Output to 1st line of LCD
	displayLCDCenteredString(1, "Empty");			// Msg Output to 2nd line of LCD
}

/*-----------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- DISPLAY POWER EXPANDER BACKUP BATTERY VOLTAGE
BONAFIDES:			FUNCTION TO DISPLAY BACKUP BATTERY VOLTAGE VIA LCD
/*-----------------------------------------------------------------------------*/
void
displayPowerExpanderVoltage(){
	//Turn on LCD backlight
	bLCDBacklight = true;
	string PwrExpBat;

	while(true){
		//func call to clear LCD
		clearLCD();
		//Display Power Expander Battery Voltages
		displayLCDString(0, 0, "PwrExpBat:");
		//Builds Value Displayed
		sprintf(PwrExpBat,"%1.2f%c", ((SensorValue[in1])/280.0), 'V');
		displayNextLCDString(PwrExpBat);
		//Short delay for refresh rate
		wait1Msec(100);
	}
	//Turn Off LCD backlight
	bLCDBacklight = false;
}

/*-----------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- LCD DISPLAY OF ENCODER VALUES
BONAFIDES:			FUNCTION TO DISPLAY ENCODER VALUES TO LCD
/*-----------------------------------------------------------------------------*/

/*void
displayEncoderValues(){
	displayLCDCenteredString(0,"Left      Right");
	displayLCDNumber(1,1,SensorValue[Drivetrain_L],5);
	displayLCDNumber(1,9,SensorValue[Drivetrain_R],5);
	if(nLCDButtons == 2){
		SensorValue[Drivetrain_L] = 0;
		SensorValue[Drivetrain_R] = 0;
	}
}*/

/*-----------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- DISPLAY MAIN BATTERY VOLTAGE
BONAFIDES:			FUNCTION TO DISPLAY MAIN BATTERY VOLTAGE VIA LCD
/*-----------------------------------------------------------------------------*/
void
displayBatteryVoltage(){
	//Turn on LCD backlight
	bLCDBacklight = true;
	//declare string type variables mainBattery & backupBattery
	string mainBattery, backupBattery;
	while(true){
		//Function call to clear LCD
		clearLCD();
		//Display the Primary Robot battery voltage
		displayLCDString(0, 0, "Primary: ");
		//Build the value to be displayed
		sprintf(mainBattery, "%1.2f%c", nImmediateBatteryLevel/1000.0,'V');
		displayNextLCDString(mainBattery);
		//Display the Backup battery voltage
		displayLCDString(1, 0, "Backup: ");
		//Build the value to be displayed
		sprintf(backupBattery, "%1.2f%c", BackupBatteryLevel/1000.0, 'V');
		displayNextLCDString(backupBattery);
		//Short delay for the LCD refresh rate
		wait1Msec(100);
	}

	//Turn off LCD backlight
	bLCDBacklight = false;
}

/*----------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- AUTONOMOUS PROGRAM SWAP OPTION
BONAFIDES:			FUNCTION GIVES USER THE ABILITY TO CHOOSE BETWEEN AUTONOMOUS MODE
								PROGRAMS
/*----------------------------------------------------------------------------------*/
void
swapAuton(){
	displayLCDCenteredString(0,"Autonomous");
	displayLCDCenteredString(1,"Swap");
	displayLCDNumber(0,14,autonomousMode,2);

	if(nLCDButtons == 2){
		autonomousMode++;
		while(nLCDButtons == 2){wait1Msec(10);}
	}

	if(autonomousMode > 12){
		autonomousMode = 1;
	}
}

/*----------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- AUTONOMOUS MODE LCD START OPTION
BONAFIDES:			FUNCTION GIVES USER THE ABILITY TO START SELECTED AUTONOMOUS MODE
								PROGRAM BY PRESSING BUTTON ON LCD
/*----------------------------------------------------------------------------------*/
void
startAuton(){
	displayLCDCenteredString(0, "press center to");
	displayLCDCenteredString(1, "start autonomous");
}

//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                      				AUTONOMOUS  MODE																				//
//													 			SETUP SECTION																					//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////

/*----------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- AUTONOMOUS MODE SELECTOR PROGRAM
BONAFIDES:			GIVES USER THE ABILITY TO CHOOSE BETWEEN MULTIPLE AUTONOMOUS MODE
								PROGRAMS USING LCD. USEFUL FOR STRATEGIC PLANNING PURPOSES.
/*----------------------------------------------------------------------------------*/
void
autonomousSelection(){
	//Turn on the LCD backlight
	bLCDBacklight = true;
	//Func call to clear LCD screen
	clearLCD();

	while(nLCDButtons != 2)
	{
		displayLCDCenteredString(0,"Autonomus");
		displayLCDNumber(0,14,autonomousMode, 2);
		displayLCDCenteredString(1,"<< Selection >>");
		if(nLCDButtons == 1){
			autonomousMode--;
			while(nLCDButtons == 1){wait1Msec(10);}
		}
		if(nLCDButtons == 4){
			autonomousMode++;
			while(nLCDButtons == 4){wait1Msec(10);}
		}
		if(autonomousMode < 1){
			autonomousMode = 12;
		}
		else if(autonomousMode > 12){
			autonomousMode = 1;
		}
		wait1Msec(10);
	}

	//clear the LCD screen
	clearLCD();

	//Turn off LCD backlight
	bLCDBacklight = false;
}

/*----------------------------------------------------------------------------------*\
TYPE:						VOID
DESCRIPTION:		FUNCTION -- AUTONOMOUS MODE PROGRAMS
BONAFIDES:			LISTED BELOW ARE 12 POSSIBLE SLOTS FOR 12 SEPARATE AUTONOMOUS MODE
								PROGRAMS.
/*----------------------------------------------------------------------------------*/





void
BlueRight_RedRight(){
			clearDebugStream();

	// lower MOGO
	lowerMOGO();

	clearEncoders();

	// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO MOGO");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,50); // distance to MOGO target

	clearEncoders();

	stopMOGO();							// Once switch is pressed stop the MOGO
	raiseMOGO();						// command to raise MOGO


	// turn program block
	writeDebugStreamLine(" ");
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("TURN AROUND");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);

	autoTurnDist(80,23);

		clearEncoders();

	// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO SCORE BARS");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,49); //DISTANCE TO MOGO TARGET

		clearEncoders();

		// turn program block
	writeDebugStreamLine(" ");
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("LITTLE TURN");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);

	autoTurnDist(40,8);

		clearEncoders();

		// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO SCORE BARS");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,19);

		clearEncoders();

			// turn program block
	writeDebugStreamLine(" ");
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("LITTLE TURN");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);

	autoTurnDist(-100,12);

		clearEncoders();

			// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO SCORE BARS");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,10);

		clearEncoders();

	lowerMOGO();

			// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO SCORE BARS");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(-120,14);

		clearEncoders();

	stopMOGO();							// Once switch is pressed stop the MOGO
	raiseMOGO();						// command to raise MOGO
/*************************************************************************/
	}
void
BlueLeft_RedLeft(){
	//insert autonomous mode program #2 below

	/******************************First Part*****************************/
			clearDebugStream();

	// lower MOGO
	lowerMOGO();

		clearEncoders();

	// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO MOGO");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,50); // distance to MOGO target

		clearEncoders();

	stopMOGO();							// Once switch is pressed stop the MOGO
	raiseMOGO();						// command to raise MOGO


	// turn program block
	writeDebugStreamLine(" ");
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("TURN AROUND");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);

	autoTurnDist(-80,23);

		clearEncoders();

	// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO SCORE BARS");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,49); //DISTANCE TO MOGO TARGET

		clearEncoders();

		// turn program block
	writeDebugStreamLine(" ");
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("LITTLE TURN");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);

	autoTurnDist(40,8);

		clearEncoders();

		// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO SCORE BARS");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,19);

		clearEncoders();

			// turn program block
	writeDebugStreamLine(" ");
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("LITTLE TURN");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);

	autoTurnDist(-100,12);

		clearEncoders();

			// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO SCORE BARS");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,10);

		clearEncoders();

	lowerMOGO();

			// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO SCORE BARS");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(-120,14);

		clearEncoders();

	stopMOGO();							// Once switch is pressed stop the MOGO
	raiseMOGO();						// command to raise MOGO
/*************************************************************************/


}
//--------------------------------------------------------------------------------------
void
autonomous3(){
	clearDebugStream();

	// lower MOGO
	lowerMOGO();

	// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO MOGO");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,35); // distance to MOGO target


	stopMOGO();							// Once switch is pressed stop the MOGO
	raiseMOGO();						// command to raise MOGO

	// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO MOGO");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(-120,30); // distance to MOGO target

				// turn program block
	writeDebugStreamLine(" ");
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("LITTLE TURN");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);

	autoTurnDist(-100,20);

		// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO MOGO");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(120,10); // distance to MOGO target

	// lower MOGO
	lowerMOGO();

		// straight run program block
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("DRIVE TO MOGO");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);
	writeDebugStreamLine(" ");

	//parameters: speed & distance (inches)
	autoDriveDist(-120,20); // distance to MOGO target


	stopMOGO();							// Once switch is pressed stop the MOGO
	raiseMOGO();						// command to raise MOGO

					// turn program block
	writeDebugStreamLine(" ");
	q1 = abs(SensorValue(IME_DL));
	q2 = abs(SensorValue(IME_DR));
	writeDebugStreamLine("LITTLE TURN");
	writeDebugStreamLine("The value of q1 is:  %d", q1);
	writeDebugStreamLine("The value of q2 is:  %d", q2);

	autoTurnDist(100,25);


}
//--------------------------------------------------------------------------------------
void
autonomous4(){
	//insert autonomous mode program #4 below
	nothingOnScreen(); //remove this func when you place your assigned func to this slot
}
//--------------------------------------------------------------------------------------
void
autonomous5(){
	//insert autonomous mode program #5 below
	nothingOnScreen(); //remove this func when you place your assigned func to this slot
}
//--------------------------------------------------------------------------------------
void
autonomous6(){
	//insert autonomous mode program #6 below
	nothingOnScreen(); //remove this func when you place your assigned func to this slot
}
//--------------------------------------------------------------------------------------
void
autonomous7(){
	//insert autonomous mode program #7 below
	nothingOnScreen(); //remove this func when you place your assigned func to this slot
}
//--------------------------------------------------------------------------------------
void
autonomous8(){
	//insert autonomous mode program #8 below
	nothingOnScreen(); //remove this func when you place your assigned func to this slot
}
//--------------------------------------------------------------------------------------
void
autonomous9(){
	//insert autonomous mode program #9 below
	nothingOnScreen(); //remove this func when you place your assigned func to this slot
}
//--------------------------------------------------------------------------------------
void
autonomous10(){
	//insert autonomous mode program #10 below
	nothingOnScreen(); //remove this func when you place your assigned func to this slot
}
//--------------------------------------------------------------------------------------
void
autonomous11(){
	//insert autonomous mode program #11 below
	nothingOnScreen(); //remove this func when you place your assigned func to this slot
}
//--------------------------------------------------------------------------------------
void
autonomous12(){
	//insert autonomous mode program #12 below
	nothingOnScreen(); //remove this func when you place your assigned func to this slot
}

//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                          		DRIVER  CONTROL  MODE																		//
//																TASK SETUP SECTION																		//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////

/*=======================================================================================*\
|																		DRIVER CONTROL MODE 																	|
|																	BASIC ROBOT OPERATION TASKS 														|
/*=======================================================================================*/
/*---------------------------------------------------------------------------------------*\
TYPE:						TASK
DESCRIPTION:		DRIVE TRAIN
BONAFIDES:			TASK TO IMPLEMENT DRIVE TRAIN FUNCTIONS
/*---------------------------------------------------------------------------------------*/

task
Blink_LED(){
	while(true){
		Blink_RedLED();
		Blink_GreenLED();
	}
}




/*---------------------------------------------------------------------------------------*\
TYPE:						TASK
DESCRIPTION:		DRIVE TRAIN
BONAFIDES:			TASK TO IMPLEMENT DRIVE TRAIN FUNCTIONS
/*---------------------------------------------------------------------------------------*/
task
driveBase_t(){
	while(true){
		driveTrain_func();
	}
}

/*---------------------------------------------------------------------------------------*\
TYPE:						TASK
DESCRIPTION:		TOWER ELEVATOR LIFT
BONAFIDES:			TASK TO IMPLEMENT TOWER LIFT FUNCTIONS
/*---------------------------------------------------------------------------------------*/
task
towerLift_t(){
	while(true){
		towerLift_func();
	}
}

/*---------------------------------------------------------------------------------------*\
TYPE:						TASK
DESCRIPTION:		ARM LIFT
BONAFIDES:			TASK TO IMPLEMENT ARM LIFT FUNCTIONS
/*---------------------------------------------------------------------------------------*/
task
armLift_t(){
	while(true){
		armLift_func();
	}
}

/*---------------------------------------------------------------------------------------*\
TYPE:						TASK
DESCRIPTION:		SHOVEL LIFT
BONAFIDES:			TASK TO IMPLEMENT SHOVEL LIFT FUNCTIONS
/*---------------------------------------------------------------------------------------*/
task
shovelLift_t(){
	while(true){
		shovelLift_func();
	}
}

/*---------------------------------------------------------------------------------------*\
TYPE:						TASK
DESCRIPTION:		CLAW
BONAFIDES:			TASK TO IMPLEMENT CLAW FUNCTIONS
/*---------------------------------------------------------------------------------------*/
task
claw_t(){
	while(true){
		claw_func();
	}
}

/*=======================================================================================*\
|																DRIVER CONTROL MODE 																 			|
|														DISPLAY TASK SETUP SECTION &								 									|
|														DRIVER MODE DISPLAY PROGRAMS														 			|
/*=======================================================================================*/

/*---------------------------------------------------------------------------------------*\
TYPE:						TASK
DESCRIPTION:		DRIVER CONTROL VIEW VALUES FOR LCD DISPLAY
BONAFIDES:
/*---------------------------------------------------------------------------------------*/
task
driverControlViewValues(){
	//Turn on LCD backlight
	bLCDBacklight = true;
	//Func call to clear LCD screen
	clearLCD();

	while(true){
		if(nLCDButtons == 1){
			driverControlModeCount--;
			//Func call to clear LCD screen
			clearLCD();
			while(nLCDButtons == 1){wait1Msec(10);}
		}
		if(nLCDButtons == 4){
			driverControlModeCount++;
			clearLCD();
			while(nLCDButtons == 1){wait1Msec(10);}
		}
		if(driverControlModeCount < 1){
			driverControlModeCount = 12;
		}
		else if (driverControlModeCount > 12){
			driverControlModeCount = 1;
		}

		// ...........................................................................................
		//	List below are 12 drive controll mode program call slots
		//	If a program is not installed for slot (case) then LCD reads "Nothing On Screen"
		//	There are 12 possible slots (cases) for driver controll programs to be inserted
		//	The number of 12 program slots (cases) was chosen at random and has no specific reasoning
		// ............................................................................................

		switch
		(driverControlModeCount){
		//--------------------------------------------------------------------------------------
		case 1:
			//driver control mode program #1: DISPLAY BATTERY VOLTAGE PROGRAM
			displayBatteryVoltage();
			break;
		//--------------------------------------------------------------------------------------
		case 2:
			//driver control mode program #2: DISPLAY POWER EXPANDER VOLTAGE
			displayPowerExpanderVoltage();
			break;
		//--------------------------------------------------------------------------------------
		case 3:
			//driver control mode program #3: SWAP AUTONOMOUS MODE PROGRAMS OPTION
			swapAuton();
			break;
		//--------------------------------------------------------------------------------------
		case 4:
			//driver control mode program #4: START AUTONOMOUS MODE PROGRAMS OPTION
			startAuton();
			break;
		//--------------------------------------------------------------------------------------
		case 5:
			//driver control mode program #5: DISPLAY ENCODER VALUES
			//displayEncoderValues();
			nothingOnScreen();
			break;
		//--------------------------------------------------------------------------------------
		case 6:
			//insert driver control mode program #6 below -- CURRENTLY EMPTY
			nothingOnScreen(); //remove this func when you place your assigned func to this slot
			break;
		//--------------------------------------------------------------------------------------
		case 7:
			//insert driver control mode program#7 below -- CURRENTLY EMPTY
			nothingOnScreen(); //remove this func when you place your assigned func to this slot
			break;
		//--------------------------------------------------------------------------------------
		case 8:
			//insert driver control mode program #8 below -- CURRENTLY EMPTY
			nothingOnScreen(); //remove this func when you place your assigned func to this slot
			break;
		//--------------------------------------------------------------------------------------
		case 9:
			//insert driver control mode program #9 below -- CURRENTLY EMPTY
			nothingOnScreen(); //remove this func when you place your assigned func to this slot
			break;
		//--------------------------------------------------------------------------------------
		case 10:
			//insert driver control mode program #10 below -- CURRENTLY EMPTY
			nothingOnScreen(); //remove this func when you place your assigned func to this slot
			break;
		//--------------------------------------------------------------------------------------
		case 11:
			//insert driver control mode program #11 below -- CURRENTLY EMPTY
			nothingOnScreen(); //remove this func when you place your assigned func to this slot
			break;
		//--------------------------------------------------------------------------------------
		case 12:
			//insert driver control mode program #12 below -- CURRENTLY EMPTY
			nothingOnScreen(); //remove this func when you place your assigned func to this slot
			break;
		//--------------------------------------------------------------------------------------
		default:
			//insert driver control mode program #1 below
			displayBatteryVoltage();
		//--------------------------------------------------------------------------------------
		}
		wait1Msec(10);
	}

	//Func call to clear LCD screen
	clearLCD();
	//Turn off LCD backlight
	bLCDBacklight = false;
}

//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                          PRE-AUTONOMOUS FUNCTIONS																		//
//																																											//
// 	You may want to perform some actions before the competition starts. Do them in the	//
// 	following function.																																	//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////

void
pre_auton(){
	//zeroEncoders_func();
	autonomousSelection();
	bStopTasksBetweenModes = true;

}

//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                                 AUTONOMOUS TASK 																			//
//																																											//
// 	This task is used to control your robot during the autonomous phase of a VEX 				//
//	Competition. You must modify the code to add your own robot specific commands here.	//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////

task
autonomous(){
	switch(autonomousMode){
	//--------------------------------------------------------------------------------------
	case 1:
		BlueRight_RedRight();				//currently empty -- referencing autonomous mode function #1
		break;
	//--------------------------------------------------------------------------------------
	case 2:
		BlueLeft_RedLeft();				//currently empty -- referencing autonomous mode function #2
		break;
	//--------------------------------------------------------------------------------------
	case 3:
		autonomous3();				//currently empty -- referencing autonomous mode function #3
		break;
	//--------------------------------------------------------------------------------------
	case 4:
		autonomous4();				//currently empty -- referencing autonomous mode function #4
		break;
	//--------------------------------------------------------------------------------------
	case 5:
		autonomous5();				//currently empty -- referencing autonomous mode function #5
		break;
	//--------------------------------------------------------------------------------------
	case 6:
		autonomous6();				//currently empty -- referencing autonomous mode function #6
		break;
	//--------------------------------------------------------------------------------------
	case 7:
		autonomous7();				//currently empty -- referencing autonomous mode function #7
		break;
	//--------------------------------------------------------------------------------------
	case 8:
		autonomous8();				//currently empty -- referencing autonomous mode function #8
		break;
	//--------------------------------------------------------------------------------------
	case 9:
		autonomous9();				//currently empty -- referencing autonomous mode function #9
		break;
	//--------------------------------------------------------------------------------------
	case 10:
		autonomous10();				//currently empty -- referencing autonomous mode function #10
		break;
	//--------------------------------------------------------------------------------------
	case 11:
		autonomous11();				//currently empty -- referencing autonomous mode function #11
		break;
	//--------------------------------------------------------------------------------------
	case 12:
		autonomous12();				//currently empty -- referencing autonomous mode function #12
		break;
	//--------------------------------------------------------------------------------------

	}
	wait1Msec(2000);
}

//////////////////////////////////////////////////////////////////////////////////////////
//																																											//
//                                 USER CONTROL TASK																		//
//																																											//
// 	This task is used to control your robot during the user control phase of a VEX 			//
//	Competition. You must modify the code to add your own robot specific commands here.	//
//																																											//
//////////////////////////////////////////////////////////////////////////////////////////

task
usercontrol(){
	clearLCD();
	startTask(driverControlViewValues);
	while(true){
		//use lcd to start autonomous or button 7R on controller
		if((driverControlModeCount == 3) && (nLCDButtons == 2)||(vexRT[Btn7R] == 1)){
				startTask(autonomous);
				wait1Msec(15000);
				stopTask(autonomous);
			}



		//main program
		startTask(driveBase_t);
		startTask(towerLift_t);
		startTask(armLift_t);
		startTask(shovelLift_t);
		startTask(claw_t);
		startTask(usercontrol);
	}
}
